// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Web App
let tg = window.Telegram.WebApp;

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–º—ã –∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
document.addEventListener('DOMContentLoaded', function() {
    // –£–≤–µ–¥–æ–º–ª—è–µ–º Telegram, —á—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ
    tg.ready();
    
    // –†–∞—Å—à–∏—Ä—è–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ –≤–µ—Å—å —ç–∫—Ä–∞–Ω
    tg.expand();
    
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∫–Ω–æ–ø–∫—É
    tg.MainButton.text = "–ó–∞–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ";
    tg.MainButton.show();
    tg.MainButton.onClick(() => tg.close());
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å Telegram:', tg.initDataUnsafe?.user);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
    checkUserLimits();
});

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let userRequests = {
    daily: 0,
    limit: 3
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
function showNotification(message, type = 'info') {
    // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    const notification = document.createElement('div');
    notification.className = `notification ${type}`;
    notification.innerHTML = `
        <div class="notification-content">
            <span>${message}</span>
            <button onclick="this.parentElement.parentElement.remove()">&times;</button>
        </div>
    `;
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    notification.style.cssText = `
        position: fixed;
        top: 20px;
        left: 50%;
        transform: translateX(-50%);
        z-index: 1001;
        background: ${type === 'error' ? '#dc3545' : type === 'success' ? '#28a745' : '#007bff'};
        color: white;
        padding: 12px 16px;
        border-radius: 8px;
        box-shadow: 0 4px 12px rgba(0,0,0,0.15);
        max-width: 90%;
        animation: slideDown 0.3s ease;
    `;
    
    document.body.appendChild(notification);
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫—Ä—ã—Ç—å —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
    setTimeout(() => {
        if (notification.parentNode) {
            notification.remove();
        }
    }, 5000);
}

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏–º–∏—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function checkUserLimits() {
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ —Å–µ—Ä–≤–µ—Ä—É
    const today = new Date().toDateString();
    const stored = localStorage.getItem('userRequests');
    
    if (stored) {
        const data = JSON.parse(stored);
        if (data.date === today) {
            userRequests.daily = data.count;
        } else {
            userRequests.daily = 0;
        }
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
    const counter = document.getElementById('free-requests');
    if (counter) {
        counter.textContent = Math.max(0, userRequests.limit - userRequests.daily);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤
function incrementRequestCount() {
    userRequests.daily++;
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
    const today = new Date().toDateString();
    localStorage.setItem('userRequests', JSON.stringify({
        date: today,
        count: userRequests.daily
    }));
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    checkUserLimits();
}

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏–º–∏—Ç–∞ –∑–∞–ø—Ä–æ—Å–æ–≤
function canMakeRequest() {
    return userRequests.daily < userRequests.limit;
}

// –ü–æ–∫–∞–∑–∞—Ç—å/—Å–∫—Ä—ã—Ç—å loader
function showLoader() {
    document.getElementById('loading-modal').style.display = 'block';
}

function hideLoader() {
    document.getElementById('loading-modal').style.display = 'none';
}

// –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω–∞
async function generateContentPlan() {
    const businessType = document.getElementById('business-type').value.trim();
    const targetAudience = document.getElementById('target-audience').value.trim();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç—å –ø–æ–ª–µ–π
    if (!businessType) {
        showNotification('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ç–∏–ø –±–∏–∑–Ω–µ—Å–∞', 'error');
        return;
    }
    
    if (!targetAudience) {
        showNotification('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ü–µ–ª–µ–≤—É—é –∞—É–¥–∏—Ç–æ—Ä–∏—é', 'error');
        return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤
    if (!canMakeRequest()) {
        showNotification('–ò—Å—á–µ—Ä–ø–∞–Ω –ª–∏–º–∏—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤. –û—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É!', 'error');
        showSubscriptionModal();
        return;
    }
    
    showLoader();
    
    try {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        const response = await fetch('/api/generate-plan', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                businessType: businessType,
                targetAudience: targetAudience,
                userId: tg.initDataUnsafe?.user?.id || 'demo'
            })
        });
        
        const data = await response.json();
        
        if (data.success) {
            displayContentPlan(data.plan);
            incrementRequestCount();
            showNotification('–ö–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!', 'success');
        } else {
            throw new Error(data.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω–∞');
        }
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞:', error);
        showNotification('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', 'error');
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        displayDemoContentPlan(businessType, targetAudience);
        incrementRequestCount();
        
    } finally {
        hideLoader();
    }
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω–∞
function displayContentPlan(plan) {
    const container = document.getElementById('results-container');
    
    let html = `
        <div class="result-card">
            <h4>üìÖ –ö–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω –Ω–∞ –º–µ—Å—è—Ü</h4>
            <div class="content-plan-results">
    `;
    
    if (Array.isArray(plan)) {
        plan.forEach((item, index) => {
            html += `
                <div class="plan-item">
                    <strong>–î–µ–Ω—å ${index + 1}:</strong> ${item.idea}<br>
                    <div class="hashtags-list">
                        ${item.hashtags ? item.hashtags.map(tag => `<span class="hashtag">${tag}</span>`).join('') : ''}
                    </div>
                </div>
            `;
        });
    } else {
        html += `<p>${plan}</p>`;
    }
    
    html += `
            </div>
            <button class="btn-secondary" onclick="copyToClipboard('content-plan')">
                üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –ø–ª–∞–Ω
            </button>
        </div>
    `;
    
    container.innerHTML = html;
    container.scrollIntoView({ behavior: 'smooth' });
}

// –î–µ–º–æ –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
function displayDemoContentPlan(businessType, targetAudience) {
    const demoPlan = [
        {
            idea: `–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –∏—Å—Ç–æ—Ä–∏—é —Å–æ–∑–¥–∞–Ω–∏—è –≤–∞—à–µ–≥–æ ${businessType}`,
            hashtags: ['#–∏—Å—Ç–æ—Ä–∏—è', '#–±–∏–∑–Ω–µ—Å', '#–Ω–∞—á–∏–Ω–∞–ª–∏']
        },
        {
            idea: `–ü–æ–∫–∞–∂–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å —Ä–∞–±–æ—Ç—ã –∏–∑–Ω—É—Ç—Ä–∏`,
            hashtags: ['#–ø—Ä–æ—Ü–µ—Å—Å', '#—Ä–∞–±–æ—Ç–∞', '#–∫–∞—á–µ—Å—Ç–≤–æ']
        },
        {
            idea: `–û—Ç–∑—ã–≤—ã –¥–æ–≤–æ–ª—å–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤`,
            hashtags: ['#–æ—Ç–∑—ã–≤—ã', '#–∫–ª–∏–µ–Ω—Ç—ã', '#–∫–∞—á–µ—Å—Ç–≤–æ']
        },
        {
            idea: `–°–æ–≤–µ—Ç—ã –¥–ª—è ${targetAudience}`,
            hashtags: ['#—Å–æ–≤–µ—Ç—ã', '#–ø–æ–ª–µ–∑–Ω–æ', '#–ª–∞–π—Ñ—Ö–∞–∫']
        },
        {
            idea: `–ê–∫—Ü–∏–∏ –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è`,
            hashtags: ['#–∞–∫—Ü–∏—è', '#—Å–∫–∏–¥–∫–∞', '#–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ']
        }
    ];
    
    displayContentPlan(demoPlan);
}

// –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ö–µ—à—Ç–µ–≥–æ–≤
async function generateHashtags() {
    const postText = document.getElementById('post-text').value.trim();
    
    if (!postText) {
        showNotification('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞', 'error');
        return;
    }
    
    if (!canMakeRequest()) {
        showNotification('–ò—Å—á–µ—Ä–ø–∞–Ω –ª–∏–º–∏—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤. –û—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É!', 'error');
        showSubscriptionModal();
        return;
    }
    
    showLoader();
    
    try {
        const response = await fetch('/api/generate-hashtags', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                postText: postText,
                userId: tg.initDataUnsafe?.user?.id || 'demo'
            })
        });
        
        const data = await response.json();
        
        if (data.success) {
            displayHashtags(data.hashtags);
            incrementRequestCount();
            showNotification('–•–µ—à—Ç–µ–≥–∏ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–æ–±—Ä–∞–Ω—ã!', 'success');
        } else {
            throw new Error(data.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ö–µ—à—Ç–µ–≥–æ–≤');
        }
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞:', error);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ–º–æ-—Ö–µ—à—Ç–µ–≥–∏
        const demoHashtags = ['#–∫–æ–Ω—Ç–µ–Ω—Ç', '#smm', '#–º–∞—Ä–∫–µ—Ç–∏–Ω–≥', '#–±–∏–∑–Ω–µ—Å', '#–ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ', '#—Ä–µ–∫–ª–∞–º–∞', '#—Å–æ—Ü—Å–µ—Ç–∏', '#–∏–Ω—Å—Ç–∞–≥—Ä–∞–º', '#–ø—Ä–æ–¥–∞–∂–∏', '#–∫–ª–∏–µ–Ω—Ç—ã'];
        displayHashtags(demoHashtags);
        incrementRequestCount();
        
    } finally {
        hideLoader();
    }
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ö–µ—à—Ç–µ–≥–æ–≤
function displayHashtags(hashtags) {
    const container = document.getElementById('results-container');
    
    let html = `
        <div class="result-card">
            <h4>#Ô∏è‚É£ –ü–æ–¥–æ–±—Ä–∞–Ω–Ω—ã–µ —Ö–µ—à—Ç–µ–≥–∏</h4>
            <div class="hashtags-list">
                ${hashtags.map(tag => `<span class="hashtag">${tag}</span>`).join('')}
            </div>
            <button class="btn-secondary" onclick="copyHashtags()">
                üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ö–µ—à—Ç–µ–≥–∏
            </button>
        </div>
    `;
    
    container.innerHTML = html;
    container.scrollIntoView({ behavior: 'smooth' });
}

// –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤
async function analyzeCompetitor() {
    const competitorUrl = document.getElementById('competitor-url').value.trim();
    
    if (!competitorUrl) {
        showNotification('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞', 'error');
        return;
    }
    
    if (!canMakeRequest()) {
        showNotification('–ò—Å—á–µ—Ä–ø–∞–Ω –ª–∏–º–∏—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤. –û—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É!', 'error');
        showSubscriptionModal();
        return;
    }
    
    showLoader();
    
    // –î–µ–º–æ-–∞–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞
    setTimeout(() => {
        const demoAnalysis = {
            followerCount: '12.5K',
            avgLikes: '145',
            topHashtags: ['#–∫—Ä–∞—Å–æ—Ç–∞', '#–∫–æ—Å–º–µ—Ç–∏–∫–∞', '#—É—Ö–æ–¥', '#–∫—Ä–∞—Å–∏–≤–æ', '#–¥–µ–≤–æ—á–∫–∏'],
            postFrequency: '2-3 –ø–æ—Å—Ç–∞ –≤ –¥–µ–Ω—å',
            bestTime: '18:00 - 21:00',
            contentTypes: ['–§–æ—Ç–æ —Ç–æ–≤–∞—Ä–æ–≤', 'Stories —Å –ø—Ä–æ—Ü–µ—Å—Å–æ–º', '–û—Ç–∑—ã–≤—ã –∫–ª–∏–µ–Ω—Ç–æ–≤']
        };
        
        displayCompetitorAnalysis(demoAnalysis);
        incrementRequestCount();
        hideLoader();
        showNotification('–ê–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω!', 'success');
    }, 2000);
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤
function displayCompetitorAnalysis(analysis) {
    const container = document.getElementById('results-container');
    
    let html = `
        <div class="result-card">
            <h4>üìä –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞</h4>
            <div class="analysis-results">
                <p><strong>–ü–æ–¥–ø–∏—Å—á–∏–∫–∏:</strong> ${analysis.followerCount}</p>
                <p><strong>–°—Ä–µ–¥–Ω–∏–µ –ª–∞–π–∫–∏:</strong> ${analysis.avgLikes}</p>
                <p><strong>–ß–∞—Å—Ç–æ—Ç–∞ –ø–æ—Å—Ç–æ–≤:</strong> ${analysis.postFrequency}</p>
                <p><strong>–õ—É—á—à–µ–µ –≤—Ä–µ–º—è:</strong> ${analysis.bestTime}</p>
                
                <p><strong>–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ö–µ—à—Ç–µ–≥–∏:</strong></p>
                <div class="hashtags-list">
                    ${analysis.topHashtags.map(tag => `<span class="hashtag">${tag}</span>`).join('')}
                </div>
                
                <p><strong>–¢–∏–ø—ã –∫–æ–Ω—Ç–µ–Ω—Ç–∞:</strong></p>
                <ul>
                    ${analysis.contentTypes.map(type => `<li>${type}</li>`).join('')}
                </ul>
            </div>
        </div>
    `;
    
    container.innerHTML = html;
    container.scrollIntoView({ behavior: 'smooth' });
}

// –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
function copyToClipboard(type) {
    let textToCopy = '';
    
    if (type === 'content-plan') {
        const planItems = document.querySelectorAll('.plan-item');
        planItems.forEach(item => {
            textToCopy += item.textContent.trim() + '\n\n';
        });
    }
    
    navigator.clipboard.writeText(textToCopy).then(() => {
        showNotification('–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!', 'success');
    }).catch(() => {
        showNotification('–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è', 'error');
    });
}

// –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ö–µ—à—Ç–µ–≥–æ–≤
function copyHashtags() {
    const hashtags = Array.from(document.querySelectorAll('.hashtags-list .hashtag'))
        .map(tag => tag.textContent)
        .join(' ');
        
    navigator.clipboard.writeText(hashtags).then(() => {
        showNotification('–•–µ—à—Ç–µ–≥–∏ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã!', 'success');
    }).catch(() => {
        showNotification('–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è', 'error');
    });
}

// –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞
function showSubscriptionModal() {
    document.getElementById('subscription-modal').style.display = 'block';
}

function closeModal(modalId) {
    document.getElementById(modalId).style.display = 'none';
}

function selectPlan(planType) {
    showNotification(`–í—ã–±—Ä–∞–Ω –ø–ª–∞–Ω: ${planType}. –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –æ–ø–ª–∞—Ç—É...`, 'info');
    
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ –ø–ª–∞—Ç–µ–∂–Ω—É—é —Å–∏—Å—Ç–µ–º—É
    setTimeout(() => {
        closeModal('subscription-modal');
        // –ò–º–∏—Ç–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –æ–ø–ª–∞—Ç—É –¥–ª—è –¥–µ–º–æ
        if (confirm('–≠—Ç–æ –¥–µ–º–æ-–≤–µ—Ä—Å–∏—è. –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å PRO –¥–æ—Å—Ç—É–ø –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è?')) {
            userRequests.limit = 1000;
            showNotification('PRO –¥–æ—Å—Ç—É–ø –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!', 'success');
            checkUserLimits();
        }
    }, 1500);
}

// –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –Ω–∏—Ö
window.onclick = function(event) {
    const modals = document.querySelectorAll('.modal');
    modals.forEach(modal => {
        if (event.target === modal) {
            modal.style.display = 'none';
        }
    });
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–Ω–∞–∑–∞–¥" –≤ Telegram
tg.BackButton.onClick(() => {
    if (document.querySelector('.modal[style*="block"]')) {
        // –ï—Å–ª–∏ –æ—Ç–∫—Ä—ã—Ç–æ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ, –∑–∞–∫—Ä—ã–≤–∞–µ–º –µ–≥–æ
        document.querySelectorAll('.modal').forEach(modal => {
            modal.style.display = 'none';
        });
    } else {
        // –ò–Ω–∞—á–µ –∑–∞–∫—Ä—ã–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        tg.close();
    }
});